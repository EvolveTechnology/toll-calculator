defmodule Toll.Holidays do
  @moduledoc """
  This module implements functionality for checking whether or not a given date
  is a holiday.
  """

  @holidays [
    ~D[2013-01-01],
    ~D[2013-01-06],
    ~D[2013-03-29],
    ~D[2013-03-31],
    ~D[2013-04-01],
    ~D[2013-05-01],
    ~D[2013-05-09],
    ~D[2013-05-19],
    ~D[2013-06-06],
    ~D[2013-06-22],
    ~D[2013-11-02],
    ~D[2013-12-25],
    ~D[2013-12-26],
    ~D[2014-01-01],
    ~D[2014-01-06],
    ~D[2014-04-18],
    ~D[2014-04-20],
    ~D[2014-04-21],
    ~D[2014-05-01],
    ~D[2014-05-29],
    ~D[2014-06-06],
    ~D[2014-06-08],
    ~D[2014-06-21],
    ~D[2014-10-31],
    ~D[2014-12-25],
    ~D[2014-12-26],
    ~D[2015-01-01],
    ~D[2015-01-06],
    ~D[2015-04-03],
    ~D[2015-04-05],
    ~D[2015-04-06],
    ~D[2015-05-01],
    ~D[2015-05-14],
    ~D[2015-05-24],
    ~D[2015-06-06],
    ~D[2015-06-26],
    ~D[2015-11-07],
    ~D[2015-12-25],
    ~D[2015-12-26],
    ~D[2017-01-01],
    ~D[2017-01-06],
    ~D[2017-03-25],
    ~D[2017-03-27],
    ~D[2017-03-28],
    ~D[2017-05-01],
    ~D[2017-05-05],
    ~D[2017-05-15],
    ~D[2017-06-06],
    ~D[2017-06-25],
    ~D[2017-11-05],
    ~D[2017-12-25],
    ~D[2017-12-26],
    ~D[2018-01-01],
    ~D[2018-01-06],
    ~D[2018-04-14],
    ~D[2018-04-16],
    ~D[2018-04-17],
    ~D[2018-05-01],
    ~D[2018-05-25],
    ~D[2018-06-04],
    ~D[2018-06-06],
    ~D[2018-06-24],
    ~D[2018-11-04],
    ~D[2018-12-25],
    ~D[2018-12-26],
    ~D[2019-01-01],
    ~D[2019-01-06],
    ~D[2019-04-19],
    ~D[2019-04-21],
    ~D[2019-04-22],
    ~D[2019-05-01],
    ~D[2019-05-30],
    ~D[2019-06-06],
    ~D[2019-06-09],
    ~D[2019-06-22],
    ~D[2019-11-02],
    ~D[2019-12-25],
    ~D[2019-12-26],
    ~D[2020-01-01],
    ~D[2020-01-06],
    ~D[2020-04-10],
    ~D[2020-04-12],
    ~D[2020-04-13],
    ~D[2020-05-01],
    ~D[2020-05-21],
    ~D[2020-05-31],
    ~D[2020-06-06],
    ~D[2020-06-26],
    ~D[2020-11-07],
    ~D[2020-12-25],
    ~D[2020-12-26],
    ~D[2021-01-01],
    ~D[2021-01-06],
    ~D[2021-04-02],
    ~D[2021-04-04],
    ~D[2021-04-05],
    ~D[2021-05-01],
    ~D[2021-05-13],
    ~D[2021-05-23],
    ~D[2021-06-06],
    ~D[2021-06-26],
    ~D[2021-11-06],
    ~D[2021-12-25],
    ~D[2021-12-26],
    ~D[2022-01-01],
    ~D[2022-01-06],
    ~D[2022-04-15],
    ~D[2022-04-17],
    ~D[2022-04-18],
    ~D[2022-05-01],
    ~D[2022-05-26],
    ~D[2022-06-05],
    ~D[2022-06-06],
    ~D[2022-06-25],
    ~D[2022-11-05],
    ~D[2022-12-25],
    ~D[2022-12-26],
    ~D[2023-01-01],
    ~D[2023-01-06],
    ~D[2023-04-07],
    ~D[2023-04-09],
    ~D[2023-04-10],
    ~D[2023-05-01],
    ~D[2023-05-18],
    ~D[2023-05-28],
    ~D[2023-06-06],
    ~D[2023-06-24],
    ~D[2023-11-04],
    ~D[2023-12-25],
    ~D[2023-12-26],
    ~D[2024-01-01],
    ~D[2024-01-06],
    ~D[2024-03-29],
    ~D[2024-03-31],
    ~D[2024-04-01],
    ~D[2024-05-01],
    ~D[2024-05-09],
    ~D[2024-05-19],
    ~D[2024-06-06],
    ~D[2024-06-22],
    ~D[2024-11-02],
    ~D[2024-12-25],
    ~D[2024-12-26],
    ~D[2025-01-01],
    ~D[2025-01-06],
    ~D[2025-04-18],
    ~D[2025-04-20],
    ~D[2025-04-21],
    ~D[2025-05-01],
    ~D[2025-05-29],
    ~D[2025-06-06],
    ~D[2025-06-08],
    ~D[2025-06-21],
    ~D[2025-10-31],
    ~D[2025-12-25],
    ~D[2025-12-26],
    ~D[2026-01-01],
    ~D[2026-01-06],
    ~D[2026-04-03],
    ~D[2026-04-05],
    ~D[2026-04-06],
    ~D[2026-05-01],
    ~D[2026-05-14],
    ~D[2026-05-24],
    ~D[2026-06-06],
    ~D[2026-06-26],
    ~D[2026-11-07],
    ~D[2026-12-25],
    ~D[2026-12-26],
    ~D[2027-01-01],
    ~D[2027-01-06],
    ~D[2027-03-26],
    ~D[2027-03-28],
    ~D[2027-03-29],
    ~D[2027-05-01],
    ~D[2027-05-06],
    ~D[2027-05-16],
    ~D[2027-06-06],
    ~D[2027-06-26],
    ~D[2027-11-06],
    ~D[2027-12-25],
    ~D[2027-12-26]
  ]

  @doc """
  Returns whether or not the given datetime is a holiday.
  """
  @spec include?(Date.t()) :: boolean()
  def include?(date) do
    date in @holidays
  end

  @doc """
  Returns whether or not the given date is within the supported range.
  """
  @spec valid_date?(Date.t()) :: boolean()
  def valid_date?(date) do
    {year, _month, _day} = Date.to_erl(date)
    year in 2013..2027
  end
end
